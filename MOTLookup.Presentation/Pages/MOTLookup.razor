   @page "/"

   @using Models.Requests
   @using Models.Responses
   @using Service.IServices
   @using Utilities.Validators

   @inject IMOTLookupService MotService

   <div>
       <img src="car-large.png" alt="Car" class="img-fluid" />
       <h1>MOT Lookup</h1>
   </div>

   <EditForm Model="@vehicleRequest" OnValidSubmit="FetchVehicleData">
       <DataAnnotationsValidator />
       <ValidationSummary />

       <div class="form-group">
           <label for="registration">Enter Vehicle Registration Number:</label>
           <InputText id="registration" class="form-control" @bind-Value="vehicleRequest.Registration" />
           <ValidationMessage For="@(() => vehicleRequest.Registration)" />
       </div>

       <button type="submit" class="btn btn-primary mt-2">Check MOT</button>
   </EditForm>

   @if (isLoading)
   {
       <p>Loading...</p>
   }

   @if (!string.IsNullOrEmpty(errorMessage))
   {
       <div class="alert alert-danger mt-2">@errorMessage</div>
   }

   <VehicleDetails VehicleResponse="vehicleResponse" />

   @code {
       private VehicleRequest vehicleRequest = new VehicleRequest();
       private VehicleResponse vehicleResponse;
       private bool isLoading = false;
       private string errorMessage;

       private async Task FetchVehicleData()
       {
           isLoading = true;
           errorMessage = null;
           vehicleResponse = null;

           if (!RegistrationValidator.IsValidUKRegistration(vehicleRequest.Registration))
           {
               errorMessage = "Please enter a valid registration number.";
               isLoading = false;
               return;
           }

           var result = await MotService.GetVehicleData(vehicleRequest.Registration);

           if (result.IsSuccess)
           {
               vehicleResponse = result.Data;
           }
           else
           {
               errorMessage = result.Message;
           }

           isLoading = false;
       }
   }